:py:mod:`samsara.pelt`
======================

.. py:module:: samsara.pelt

.. autoapi-nested-parse::

   Subpackage for Pelt algorithm (`samsara.pelt`)



Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   samsara.pelt.block_pelt
   samsara.pelt.datetime_to_year_fraction
   samsara.pelt.filter_index_by_date
   samsara.pelt.pelt
   samsara.pelt.pixel_pelt



.. py:function:: block_pelt(array: numpy.ndarray, dates: numpy.ndarray, dates_timestamp: numpy.ndarray, n_breaks: int, penalty: float, start_date: Union[str, None], algo_rpt: ruptures.KernelCPD) -> numpy.ndarray

   Apply the linearly penalized segmentation (Pelt) over a NumPy Array.

   Apply the Pelt algorithm over every geo-coordinate to find the optimal segmentation in a time
   series.

   Parameters
   ----------
   array : np.ndarray
       3-dim array, with dimensions ('time', 'y', 'x'), to apply pelt over each (x, y) pair.
   dates : np.ndarray
       Array with dates of type np.datetime64.
   dates_timestamp : np.ndarray
       Array with dates of type float. Should be the `dates` array as UNIX time/timestamp.
   n_breaks : int
       Number of breaks expected in the data.
   penalty : float
       Penalty value for the KernelCPD prediction.
   start_date : Union[str, None]
       Dates from which breaks are calculated.
   algo_rpt : rpt.KernelCPD
       KernelCPD instance to use in the search of breakpoints. Must be defined with 'rbf' as model.

   Returns
   -------
   np.ndarray
       3-dim array, the two original positional dimensions and a new one of size equal to twice
       `n_breaks`, where the first `n_breaks` values correspond to the difference of the medians
       between two consecutive breaks, and the following `n_breaks` contain the date on which the
       break occurred. This new dimension will be in the last position, which means that the
       coordinates will be ('y', 'x', 'bkp').


.. py:function:: datetime_to_year_fraction(dates: numpy.ndarray) -> Union[numpy.ndarray, float]

   Convert an array of dates to year and fraction.

   Parameters
   ----------
   dates : np.ndarray
       Array of type datetime64 to be converted.

   Returns
   -------
   Union[np.ndarray, float]
       Converted float or array with date as the year and percentage of the year as a decimal.


.. py:function:: filter_index_by_date(dates: numpy.ndarray, start_date: str) -> numpy.ndarray

   Return indices of dates greater than start_date

   Parameters
   ----------
   dates : np.ndarray
       Array of dates to filter.
   start_date : str
       String with the starting date.

   Returns
   -------
   np.ndarray
       Index array of type int with the indices of the dates grater than the starting date.


.. py:function:: pelt(array: xarray.DataArray, n_breaks: int = 5, penalty: float = 30, start_date: Union[str, None] = None, model: str = 'rbf', min_size: int = 3, jump: int = 1, backend: str = 'xarray') -> xarray.Dataset

   Apply the linearly penalized segmentation (Pelt) over a DataArray.

   Apply the Pelt algorithm over every geo-coordinate to find the optimal segmentation in a time
   series.

   Parameters
   ----------
   array : xr.DataArray
       3-dim DataArray, with dimensions ('time', 'y', 'x'), to apply pelt over each (x, y) pair.
   n_breaks : int, optional
       Number of breaks expected in the data, by default 5.
   penalty : float, optional
       Penalty value for the KernelCPD prediction, by default 30.
   start_date : Union[str, None], optional
       Dates from which breaks are calculated, by default None.
   model : str, optional
       Model used by ruptures KernelCPD, by default 'rbf'. Only 'rbf' is supported in the current
       version.
   min_size : int, optional
       Minimum segment length used by ruptures KernelCPD, by default 3.
   jump : int, optional
       Subsample (one every `jump` points), used by ruptures KernelCPD, by default 1.
   backend : str, optional
       Package used to run pelt over the entire array, by default 'xarray'. Only 'dask' and
       'xarray' are supported.

   Returns
   -------
   xr.Dataset
       3-dim array dataset. Contains two arrays, magnitude and date. The magnitude array correspond
       to the difference of the medians between two consecutive breaks. The date array contains the
       date on which the break occurred. Both arrays have the same dimensions, which will be
       ('y', 'x', 'bkp') if the original array has dimensions ('time', 'y', 'x'). The length of
       the break dimension is equal to `n_breaks`.

   Raises
   ------
   ValueError
       If the value of `model` is other than 'rbf'.
   ValueError
       If the value of `model` is other than 'dask' or 'xarray'.

   Notes
   -----
   The value of `jump` is set to 1 due to ruptures setting not accepting values other than 1 for
   KernelCPD.

   Examples
   --------
   Data creation example:

   >>> import dask.array as da
   >>> import numpy as np
   >>> import xarray as xr
   >>> start_date = np.datetime64('2020-01-01')
   >>> stop_date = np.datetime64('2020-07-01')
   >>> a = xr.DataArray(
   ...     data=da.from_array(np.random.rand(10, 4, 5)),
   ...     dims=["time", "y", "x"],
   ...     coords={
   ...         "time": np.arange(start_date, stop_date, np.timedelta64(20, 'D')).astype("datetime64[ns]"),
   ...         "y":np.arange(4),
   ...         "x":np.arange(5)
   ...     }
   ... )

   Use pelt:

   >>> import samsara.pelt as pelt
   >>> pelt.pelt(a, 3, 1)
   <xarray.Dataset>
   Dimensions:    (y: 4, x: 5, bkp: 3)
   Coordinates:
   * y          (y) int64 0 1 2 3
   * x          (x) int64 0 1 2 3 4
   * bkp      (bkp) int64 0 1 2
   Data variables:
       magnitude  (y, x, bkp) float64 dask.array<chunksize=(4, 5, 3), meta=np.ndarray>
       date       (y, x, bkp) float64 dask.array<chunksize=(4, 5, 3), meta=np.ndarray>



.. py:function:: pixel_pelt(array: numpy.ndarray, dates: numpy.ndarray, n_breaks: int = 5, penalty: float = 30.0, start_date: Union[str, None] = None, model: str = 'rbf', min_size: int = 3, jump: int = 1) -> tuple

   Apply the linearly penalized segmentation (Pelt) over a NumPy Array.

   Parameters
   ----------
   array : np.ndarray
       1-dim array, with the data for 1 pixel or (x, y) in a time series.
   dates : np.ndarray
       Array with dates of type np.datetime64.
   n_breaks : int, optional
       Number of breaks expected in the data, by default 5
   penalty : float, optional
       Penalty value for the KernelCPD prediction, by default 30.0
   start_date : Union[str, None], optional
       Dates from which breaks are calculated, by default None
   model : str, optional
       Model used by ruptures KernelCPD, by default 'rbf'.
   min_size : int, optional
       Minimum segment length used by ruptures KernelCPD, by default 3.
   jump : int, optional
       Subsample (one every `jump` points), used by ruptures KernelCPD, by default 1.

   Returns
   -------
   tuple
       Tuple of 2 1-dim arrays, each with length equal to `n_breaks`. The first array correspond to
       the difference of the medians between two consecutive breaks, known as magnitude. The second
       array contains the dates on which each break occurred.

   Notes
   -----
   The value of `jump` is set to 1 due to ruptures setting not accepting values other than 1 for
   KernelCPD.


