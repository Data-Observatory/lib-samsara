:py:mod:`samsara.kernel`
========================

.. py:module:: samsara.kernel

.. autoapi-nested-parse::

   Subpackage for Kernel structures. (`samsara.kernel`)



Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   samsara.kernel.Kernel



Functions
~~~~~~~~~

.. autoapisummary::

   samsara.kernel.circle
   samsara.kernel.cross
   samsara.kernel.custom
   samsara.kernel.ex
   samsara.kernel.octagon
   samsara.kernel.rectangle
   samsara.kernel.rhombus
   samsara.kernel.square
   samsara.kernel.is_normalized
   samsara.kernel.normalize_array



.. py:function:: circle(radius: int, normalize: bool = False) -> samsara.kernel._kernel.Kernel

   Circle shaped kernel.

   Parameters
   ----------
   radius : int
       The radius of the kernel to generate.
   normalize : bool, optional
       Normalize the kernel data values so its euclidean norm is equal to 1, by default False.

   Returns
   -------
   Kernel
       Kernel with data array shaped as a circle.

   Examples
   --------
   >>> import samsara.kernel as skernel
   >>> x = skernel.circle(3)
   >>> x.data
   array([[0., 0., 0., 1., 0., 0., 0.],
          [0., 1., 1., 1., 1., 1., 0.],
          [0., 1., 1., 1., 1., 1., 0.],
          [1., 1., 1., 1., 1., 1., 1.],
          [0., 1., 1., 1., 1., 1., 0.],
          [0., 1., 1., 1., 1., 1., 0.],
          [0., 0., 0., 1., 0., 0., 0.]])
   >>> y = skernel.circle(2, True)
   >>> y.data
   array([[0.       , 0.       , 0.2773501, 0.       , 0.       ],
          [0.       , 0.2773501, 0.2773501, 0.2773501, 0.       ],
          [0.2773501, 0.2773501, 0.2773501, 0.2773501, 0.2773501],
          [0.       , 0.2773501, 0.2773501, 0.2773501, 0.       ],
          [0.       , 0.       , 0.2773501, 0.       , 0.       ]])


.. py:function:: cross(radius: int, normalize: bool = False) -> samsara.kernel._kernel.Kernel

   Cross shaped kernel.

   Parameters
   ----------
   radius : int
       The radius of the kernel to generate.
   normalize : bool, optional
       Normalize the kernel data values so its euclidean norm is equal to 1, by default False.

   Returns
   -------
   Kernel
       Kernel with data array shaped as a cross.

   Examples
   --------
   >>> import samsara.kernel as skernel
   >>> x = skernel.cross(3)
   >>> x.data
   array([[0., 0., 0., 1., 0., 0., 0.],
          [0., 0., 0., 1., 0., 0., 0.],
          [0., 0., 0., 1., 0., 0., 0.],
          [1., 1., 1., 1., 1., 1., 1.],
          [0., 0., 0., 1., 0., 0., 0.],
          [0., 0., 0., 1., 0., 0., 0.],
          [0., 0., 0., 1., 0., 0., 0.]])


.. py:function:: custom(data: numpy.ndarray, normalize: bool = False) -> samsara.kernel._kernel.Kernel

   Custom kernel.

   Parameters
   ----------
   data : np.ndarray
       The data array of the kernel to generate.
   normalize : bool, optional
       Normalize the kernel data values so its euclidean norm is equal to 1, by default False.

   Returns
   -------
   Kernel
       Kernel with a custom data array.

   Examples
   --------
   >>> import samsara.kernel as skernel
   >>> import numpy as np
   >>> data = np.array([[1, 0, 1], [0, 1, 1], [0, 0, 0]])
   >>> x = skernel.custom(data)
   >>> x.data
   array([[1, 0, 1],
          [0, 1, 1],
          [0, 0, 0]])


.. py:function:: ex(radius: int, normalize: bool = False) -> samsara.kernel._kernel.Kernel

   Ex (x) shaped kernel.

   Parameters
   ----------
   radius : int
       The radius of the kernel to generate.
   normalize : bool, optional
       Normalize the kernel data values so its euclidean norm is equal to 1, by default False.

   Returns
   -------
   Kernel
       Kernel with data array shaped as an ex (x).

   Examples
   --------
   >>> import samsara.kernel as skernel
   >>> x = skernel.ex(3)
   >>> x.data
   array([[1., 0., 0., 0., 0., 0., 1.],
          [0., 1., 0., 0., 0., 1., 0.],
          [0., 0., 1., 0., 1., 0., 0.],
          [0., 0., 0., 1., 0., 0., 0.],
          [0., 0., 1., 0., 1., 0., 0.],
          [0., 1., 0., 0., 0., 1., 0.],
          [1., 0., 0., 0., 0., 0., 1.]])


.. py:function:: octagon(radius: int, normalize: bool = False) -> samsara.kernel._kernel.Kernel

   Octagon shaped kernel.

   Parameters
   ----------
   radius : int
       The radius of the kernel to generate.
   normalize : bool, optional
       Normalize the kernel data values so its euclidean norm is equal to 1, by default False.

   Returns
   -------
   Kernel
       Kernel with data array shaped as an octagon.

   Examples
   --------
   >>> import samsara.kernel as skernel
   >>> x = skernel.octagon(3)
   >>> x.data
   array([[0., 0., 1., 1., 1., 0., 0.],
          [0., 1., 1., 1., 1., 1., 0.],
          [1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.],
          [0., 1., 1., 1., 1., 1., 0.],
          [0., 0., 1., 1., 1., 0., 0.]])


.. py:function:: rectangle(x_radius: int, y_radius: int, normalize: bool = False) -> samsara.kernel._kernel.Kernel

   Rectangular shaped kernel.

   Parameters
   ----------
   x_radius : int
       The horizontal radius of the kernel to generate.
   y_radius : int
       The vertical radius of the kernel to generate.
   normalize : bool, optional
       Normalize the kernel data values so its euclidean norm is equal to 1, by default False.

   Returns
   -------
   Kernel
       Kernel with data array shaped as a rectangle.

   Examples
   --------
   >>> import samsara.kernel as skernel
   >>> x = skernel.rectangle(2, 3)
   >>> x.data
   array([[1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.]])


.. py:function:: rhombus(radius: int, normalize: bool = False) -> samsara.kernel._kernel.Kernel

   Rhombus (diamond) shaped kernel.

   Parameters
   ----------
   radius : int
       The radius of the kernel to generate.
   normalize : bool, optional
       Normalize the kernel data values so its euclidean norm is equal to 1, by default False.

   Returns
   -------
   Kernel
       Kernel with data array shaped as a rhombus (diamond).

   Examples
   --------
   >>> import samsara.kernel as skernel
   >>> x = skernel.rhombus(3)
   >>> x.data
   array([[0., 0., 0., 1., 0., 0., 0.],
          [0., 0., 1., 1., 1., 0., 0.],
          [0., 1., 1., 1., 1., 1., 0.],
          [1., 1., 1., 1., 1., 1., 1.],
          [0., 1., 1., 1., 1., 1., 0.],
          [0., 0., 1., 1., 1., 0., 0.],
          [0., 0., 0., 1., 0., 0., 0.]])


.. py:function:: square(radius: int, normalize: bool = False) -> samsara.kernel._kernel.Kernel

   Square shaped kernel.

   Parameters
   ----------
   radius : int
       The radius of the kernel to generate.
   normalize : bool, optional
       Normalize the kernel data values so its euclidean norm is equal to 1, by default False.

   Returns
   -------
   Kernel
       Kernel with data array shaped as a square.

   Examples
   --------
   >>> import samsara.kernel as skernel
   >>> x = skernel.square(3)
   >>> x.data
   array([[1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1.]])


.. py:class:: Kernel


   Kernel for neighborhood based image computation.

   A Kernel is an object to specify the neighborhood of a pixel. The kernel defines the size and
   shape of the neighborhood, and also defines the weight of each element in the neighborhood.

   Parameters
   ----------
   data: np.ndarray, optional
       Kernel data array.
   name: str, optional
       Name of the type of kernel.
   normalized: bool, optional
       Flag to indicate if the euclidean norm of the data array is equal to 1, by default False.

   .. py:property:: shape
      :type: tuple

      Shape of the kernel data array (tuple, read-only).


   .. py:attribute:: data
      :type: numpy.ndarray

      Kernel data array (np.ndarray).
          


   .. py:attribute:: name
      :type: str

      Name of the type of kernel (str).
          


   .. py:attribute:: normalized
      :type: bool

      Flag to indicate if the euclidean norm of the data array is equal to 1 (bool).
          


   .. py:method:: add(kernel: Kernel, normalize: bool = False) -> Kernel

      Add two kernels elementwise.

      Elementwise sum of data from two kernels. The shape of the data of both kernels must be
      broadcastable.
      Currently the sum of kernels with different shapes is not supported.

      Parameters
      ----------
      kernel : Kernel
          The kernel to be added.
      normalize : bool, optional
          Normalize the sum of both kernels, by default False

      Returns
      -------
      Kernel
          The sum of both kernels elementwise.

      Examples
      --------
      >>> from samsara.kernel import Kernel
      >>> import numpy as np
      >>> x = Kernel(np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]), "custom", False)
      >>> y = Kernel(np.ones((3, 3)), "square", False)
      >>> x.add(y).data
      array([[1., 2., 3.],
             [4., 5., 6.],
             [7., 8., 9.]])


   .. py:method:: rotate90(rotation: int) -> Kernel

      Rotates the data array of a kernel.

      Creates a new kernel with rotated data. The rotations are 90 degree rotations.

      Parameters
      ----------
      rotation : int
          Number of 90 degrees clockwise rotation to make.

      Returns
      -------
      Kernel
          A new kernel with rotated data.

      Examples
      --------
      >>> from samsara.kernel import Kernel
      >>> import numpy as np
      >>> x = Kernel(np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]), "custom", False)
      >>> x.rotate90(1).data
      array([[6, 3, 0],
             [7, 4, 1],
             [8, 5, 2]])



.. py:function:: is_normalized(array: numpy.ndarray) -> bool

   Check if an array is normalized.

   Parameters
   ----------
   array : np.ndarray
       Array whose norm is checked.

   Returns
   -------
   bool
       True if the array norm is equal to 1, False otherwise.


.. py:function:: normalize_array(array: numpy.ndarray) -> numpy.ndarray

   Scale array values so the euclidean norm is equal to 1.

   Parameters
   ----------
   array : np.ndarray
       Array whose values are scaled.

   Returns
   -------
   np.ndarray
       Normalized array.


